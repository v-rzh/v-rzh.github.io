<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on malware.boutique</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on malware.boutique</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Malware Review]: Mofongo Loader</title>
      <link>http://localhost:1313/posts/mofongo/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mofongo/</guid>
      <description>Rather than doing vanilla malware write ups, I&amp;rsquo;d like to introduce a different format - malware review. I&amp;rsquo;m going to rate the malware based around loose categories with an emphasis on how fun it was to reverse. The scoring will be biased, arbitrary, and unfair. Let&amp;rsquo;s go!&#xA;Discovery If you wish to follow along, the sample hash is e9007c7bd6be14d6364b91e1fd7b03043dffe8a405eca5cc6dc809762bd31ba2.&#xA;I ran into this sample completely by chance. As I was submitting logs for a recent amateur radio contest (not kidding) my browser was redirected to what appeared to be an knockoff Cloudflare verification page.</description>
    </item>
    <item>
      <title>In search of the auxiliary vector</title>
      <link>http://localhost:1313/posts/auxvector/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/auxvector/</guid>
      <description>This article and supporting repository present a naive but effective method of scanning the stack for the auxiliary vector.&#xA;Background The order of first several auxiliary vector entries as defined in the linux kernel source (create_elf_tables() in fs/binfmt_fs.c) has not changed since v2.6.12 (3a93e40326c8f470e71d20b4c42d36767450f38f last time I checked):&#xA;NEW_AUX_ENT(AT_HWCAP, ELF_HWCAP); NEW_AUX_ENT(AT_PAGESZ, ELF_EXEC_PAGESIZE); NEW_AUX_ENT(AT_CLKTCK, CLOCKS_PER_SEC); NEW_AUX_ENT(AT_PHDR, phdr_addr); NEW_AUX_ENT(AT_PHENT, sizeof(struct elf_phdr)); NEW_AUX_ENT(AT_PHNUM, exec-&amp;gt;e_phnum); NEW_AUX_ENT(AT_BASE, interp_load_addr); if (bprm-&amp;gt;interp_flags &amp;amp; BINPRM_FLAGS_PRESERVE_ARGV0) flags |= AT_FLAGS_PRESERVE_ARGV0; NEW_AUX_ENT(AT_FLAGS, flags); NEW_AUX_ENT(AT_ENTRY, e_entry); NEW_AUX_ENT(AT_UID, from_kuid_munged(cred-&amp;gt;user_ns, cred-&amp;gt;uid)); NEW_AUX_ENT(AT_EUID, from_kuid_munged(cred-&amp;gt;user_ns, cred-&amp;gt;euid)); NEW_AUX_ENT(AT_GID, from_kgid_munged(cred-&amp;gt;user_ns, cred-&amp;gt;gid)); NEW_AUX_ENT(AT_EGID, from_kgid_munged(cred-&amp;gt;user_ns, cred-&amp;gt;egid)); NEW_AUX_ENT(AT_SECURE, bprm-&amp;gt;secureexec); That means that a predictable order of struct aux_entry_64 id values can be found somewhere on the stack.</description>
    </item>
    <item>
      <title>CVE-2021-4034 Exploit</title>
      <link>http://localhost:1313/posts/pwnkit/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/pwnkit/</guid>
      <description>Root exploit for the PwnKit vulnerability. Check out the original report here .&#xA;Use this exploit with an express permission of the target system owners.&#xA;Building No dependencies needed besides libc. Just run make.&#xA;Running Running without options will execute the exploit:&#xA;[linux@linux ~]$ ./exploit ----------------------------------------------------------------------------- __\ / __ __ _ __ _ __ | \ / _ ___ / V |_ --- _)/ \ _)/| ---|_|/ \__)|_| | V |_) _/|_| \__ |__ /__\_//__ | |\_/__) | | | \/__| | ----------------------------------------------------------------------------- sh-5.</description>
    </item>
    <item>
      <title>CircleCityCon 2021: weirdrop</title>
      <link>http://localhost:1313/posts/weirdrop/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/weirdrop/</guid>
      <description>I didn&amp;rsquo;t participate in the CTF, but I noticed that there is no writeup for this challenge, so I decided to address that. :D You can find the exploit source here .&#xA;Exploitable Service We get an exploitable service binary.&#xA;[joey@gibson] file weird-rop weird-rop: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=2876651ce7257d4153ee90b05f0b1a2b29f25700, not stripped Neato! We got a 64-bit ELF. The binary is statically compiled and not stripped, making reversing and exploitation much easier for us.</description>
    </item>
    <item>
      <title>BSIDES SF 2021: ropme</title>
      <link>http://localhost:1313/posts/ropme/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ropme/</guid>
      <description>I didn&amp;rsquo;t really participate in the ctf, but I found this challenge to be interesting and since not many teams solved it/posted writeups I decided to post my solution. It&amp;rsquo;s probably not the most elegant - if you solved it in a different way I&amp;rsquo;d love to hear about it. The exploit source can be found here. In this writeup, I&amp;rsquo;m assuming you have a basic understanding of x86 architecture, return oriented programming, and the Linux API.</description>
    </item>
  </channel>
</rss>
